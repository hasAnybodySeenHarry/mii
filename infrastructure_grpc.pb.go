// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: infrastructure.proto

package mii

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InfrastructureService_CreateComponents_FullMethodName  = "/proto.InfrastructureService/CreateComponents"
	InfrastructureService_DestroyComponents_FullMethodName = "/proto.InfrastructureService/DestroyComponents"
)

// InfrastructureServiceClient is the client API for InfrastructureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfrastructureServiceClient interface {
	CreateComponents(ctx context.Context, in *CreateComponentsRequest, opts ...grpc.CallOption) (*CreateComponentsResponse, error)
	DestroyComponents(ctx context.Context, in *DestroyComponentsRequest, opts ...grpc.CallOption) (*DestroyComponentsResponse, error)
}

type infrastructureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfrastructureServiceClient(cc grpc.ClientConnInterface) InfrastructureServiceClient {
	return &infrastructureServiceClient{cc}
}

func (c *infrastructureServiceClient) CreateComponents(ctx context.Context, in *CreateComponentsRequest, opts ...grpc.CallOption) (*CreateComponentsResponse, error) {
	out := new(CreateComponentsResponse)
	err := c.cc.Invoke(ctx, InfrastructureService_CreateComponents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructureServiceClient) DestroyComponents(ctx context.Context, in *DestroyComponentsRequest, opts ...grpc.CallOption) (*DestroyComponentsResponse, error) {
	out := new(DestroyComponentsResponse)
	err := c.cc.Invoke(ctx, InfrastructureService_DestroyComponents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrastructureServiceServer is the server API for InfrastructureService service.
// All implementations must embed UnimplementedInfrastructureServiceServer
// for forward compatibility
type InfrastructureServiceServer interface {
	CreateComponents(context.Context, *CreateComponentsRequest) (*CreateComponentsResponse, error)
	DestroyComponents(context.Context, *DestroyComponentsRequest) (*DestroyComponentsResponse, error)
	mustEmbedUnimplementedInfrastructureServiceServer()
}

// UnimplementedInfrastructureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfrastructureServiceServer struct {
}

func (UnimplementedInfrastructureServiceServer) CreateComponents(context.Context, *CreateComponentsRequest) (*CreateComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponents not implemented")
}
func (UnimplementedInfrastructureServiceServer) DestroyComponents(context.Context, *DestroyComponentsRequest) (*DestroyComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyComponents not implemented")
}
func (UnimplementedInfrastructureServiceServer) mustEmbedUnimplementedInfrastructureServiceServer() {}

// UnsafeInfrastructureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfrastructureServiceServer will
// result in compilation errors.
type UnsafeInfrastructureServiceServer interface {
	mustEmbedUnimplementedInfrastructureServiceServer()
}

func RegisterInfrastructureServiceServer(s grpc.ServiceRegistrar, srv InfrastructureServiceServer) {
	s.RegisterService(&InfrastructureService_ServiceDesc, srv)
}

func _InfrastructureService_CreateComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServiceServer).CreateComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastructureService_CreateComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServiceServer).CreateComponents(ctx, req.(*CreateComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfrastructureService_DestroyComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfrastructureServiceServer).DestroyComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfrastructureService_DestroyComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfrastructureServiceServer).DestroyComponents(ctx, req.(*DestroyComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfrastructureService_ServiceDesc is the grpc.ServiceDesc for InfrastructureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfrastructureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InfrastructureService",
	HandlerType: (*InfrastructureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComponents",
			Handler:    _InfrastructureService_CreateComponents_Handler,
		},
		{
			MethodName: "DestroyComponents",
			Handler:    _InfrastructureService_DestroyComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrastructure.proto",
}
